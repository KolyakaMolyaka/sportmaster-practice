/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.openapi.api;

import com.example.openapi.model.Question;
import com.example.openapi.model.Quiz;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-06-29T16:41:33.878459+03:00[Europe/Moscow]")
@Validated
@Api(value = "quizzes", description = "the quizzes API")
public interface QuizzesApi {

    default QuizzesApiDelegate getDelegate() {
        return new QuizzesApiDelegate() {};
    }

    /**
     * GET /quizzes : Получить список всех викторин
     *
     * @return Успешный ответ (status code 200)
     */
    @ApiOperation(value = "Получить список всех викторин", nickname = "quizzesGet", notes = "", response = Quiz.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Успешный ответ", response = Quiz.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/quizzes",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Quiz>> quizzesGet() {
        return getDelegate().quizzesGet();
    }


    /**
     * POST /quizzes : Создать новую викторину
     *
     * @param quiz  (required)
     * @return Успешное создание (status code 201)
     */
    @ApiOperation(value = "Создать новую викторину", nickname = "quizzesPost", notes = "", response = Quiz.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Успешное создание", response = Quiz.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/quizzes",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Quiz> quizzesPost(@ApiParam(value = "", required = true) @Valid @RequestBody Quiz quiz) {
        return getDelegate().quizzesPost(quiz);
    }


    /**
     * DELETE /quizzes/{quizId} : Удалить викторину по ID
     *
     * @param quizId ID викторины (required)
     * @return Успешное удаление (status code 204)
     *         or Викторина не найдена (status code 404)
     */
    @ApiOperation(value = "Удалить викторину по ID", nickname = "quizzesQuizIdDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Успешное удаление"),
        @ApiResponse(code = 404, message = "Викторина не найдена") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/quizzes/{quizId}"
    )
    default ResponseEntity<Void> quizzesQuizIdDelete(@ApiParam(value = "ID викторины", required = true) @PathVariable("quizId") Integer quizId) {
        return getDelegate().quizzesQuizIdDelete(quizId);
    }


    /**
     * GET /quizzes/{quizId} : Получить информацию о викторине по ID
     *
     * @param quizId ID викторины (required)
     * @return Успешный ответ (status code 200)
     *         or Викторина не найдена (status code 404)
     */
    @ApiOperation(value = "Получить информацию о викторине по ID", nickname = "quizzesQuizIdGet", notes = "", response = Quiz.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Успешный ответ", response = Quiz.class),
        @ApiResponse(code = 404, message = "Викторина не найдена") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/quizzes/{quizId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Quiz> quizzesQuizIdGet(@ApiParam(value = "ID викторины", required = true) @PathVariable("quizId") Integer quizId) {
        return getDelegate().quizzesQuizIdGet(quizId);
    }


    /**
     * PUT /quizzes/{quizId} : Обновить информацию о викторине по ID
     *
     * @param quizId ID викторины (required)
     * @param quiz  (required)
     * @return Успешное обновление (status code 200)
     *         or Викторина не найдена (status code 404)
     */
    @ApiOperation(value = "Обновить информацию о викторине по ID", nickname = "quizzesQuizIdPut", notes = "", response = Quiz.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Успешное обновление", response = Quiz.class),
        @ApiResponse(code = 404, message = "Викторина не найдена") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/quizzes/{quizId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Quiz> quizzesQuizIdPut(@ApiParam(value = "ID викторины", required = true) @PathVariable("quizId") Integer quizId,@ApiParam(value = "", required = true) @Valid @RequestBody Quiz quiz) {
        return getDelegate().quizzesQuizIdPut(quizId, quiz);
    }


    /**
     * GET /quizzes/{quizId}/questions : Получить список вопросов для викторины с указанным ID
     *
     * @param quizId ID викторины (required)
     * @return Успешный ответ (status code 200)
     *         or Викторина не найдена (status code 404)
     */
    @ApiOperation(value = "Получить список вопросов для викторины с указанным ID", nickname = "quizzesQuizIdQuestionsGet", notes = "", response = Question.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Успешный ответ", response = Question.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Викторина не найдена") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/quizzes/{quizId}/questions",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Question>> quizzesQuizIdQuestionsGet(@ApiParam(value = "ID викторины", required = true) @PathVariable("quizId") Integer quizId) {
        return getDelegate().quizzesQuizIdQuestionsGet(quizId);
    }


    /**
     * POST /quizzes/{quizId}/questions : Добавить новый вопрос в викторину с указанным ID
     *
     * @param quizId ID викторины (required)
     * @param question  (required)
     * @return Успешное создание (status code 201)
     *         or Викторина не найдена (status code 404)
     */
    @ApiOperation(value = "Добавить новый вопрос в викторину с указанным ID", nickname = "quizzesQuizIdQuestionsPost", notes = "", response = Question.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Успешное создание", response = Question.class),
        @ApiResponse(code = 404, message = "Викторина не найдена") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/quizzes/{quizId}/questions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Question> quizzesQuizIdQuestionsPost(@ApiParam(value = "ID викторины", required = true) @PathVariable("quizId") Integer quizId,@ApiParam(value = "", required = true) @Valid @RequestBody Question question) {
        return getDelegate().quizzesQuizIdQuestionsPost(quizId, question);
    }


    /**
     * PUT /quizzes/{quizId}/questions/{questionId} : Обновить информацию о вопросе в викторине с указанным ID
     *
     * @param quizId ID викторины (required)
     * @param questionId ID вопроса (required)
     * @param question  (required)
     * @return Успешное обновление (status code 200)
     */
    @ApiOperation(value = "Обновить информацию о вопросе в викторине с указанным ID", nickname = "quizzesQuizIdQuestionsQuestionIdPut", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Успешное обновление") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/quizzes/{quizId}/questions/{questionId}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> quizzesQuizIdQuestionsQuestionIdPut(@ApiParam(value = "ID викторины", required = true) @PathVariable("quizId") Integer quizId,@ApiParam(value = "ID вопроса", required = true) @PathVariable("questionId") Integer questionId,@ApiParam(value = "", required = true) @Valid @RequestBody Question question) {
        return getDelegate().quizzesQuizIdQuestionsQuestionIdPut(quizId, questionId, question);
    }

}
